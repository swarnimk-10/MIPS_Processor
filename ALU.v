module ALU(
    input [31:0] operand1,  // First operand (from register file)
    input [31:0] operand2,  // Second operand (either register data or immediate value)
    input [3:0] ALUControl, // ALU control signal generated by ALU Control Unit
    output reg [31:0] result, // ALU result
    output reg zero          // Zero flag: 1 if result is zero
);
    
    always @(*) begin
        $display("ALU inputs: A = %h, B = %h, control = %b", operand1, operand2, ALUControl);
        case (ALUControl)
            4'b0010: result = operand1 + operand2; // ADD
            4'b0110: result = operand1 - operand2; // SUB
            4'b0000: result = operand1 & operand2; // AND
            4'b0001: result = operand1 | operand2; // OR
            4'b0111: result = (operand1 < operand2) ? 32'b1 : 32'b0; // SLT (Set on Less Than)
            default: result = 32'b0; // NOP or undefined operation
        endcase
        $display("ALU result = %h", result);
        // Zero flag: high if result equals zero
        zero = (result == 32'b0);
    end

endmodule
